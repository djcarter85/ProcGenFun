@using Microsoft.AspNetCore.Components.Forms
@using ProcGenFun
@using ProcGenFun.Blazor.Components
@using RandN
@using RandN.Distributions
@using RandN.Extensions

@page "/distributions"

<PageTitle>Distributions</PageTitle>

<Title>Distributions</Title>

<div class="mb-4 flex flex-col md:flex-row gap-x-8 gap-y-3 items-center">
    <div class="flex flex-row gap-2">
        <div>Distribution type:</div>

        <select @bind="distributionType">
            <option value="@DistributionType.Uniform">Uniform</option>
            <option value="@DistributionType.Normal">Normal</option>
        </select>
    </div>

    <button class="px-5 py-2 bg-blue-800 text-gray-50 hover:bg-blue-600 rounded-lg"
        @onclick="GenerateHistogram">Generate Histogram</button>
</div>

@if (histogram != null)
{
    var minX = histogram.Buckets.Min(b => b.Centre) - histogram.BucketWidth;
    var maxX = histogram.Buckets.Max(b => b.Centre) + histogram.BucketWidth;
    var width = maxX - minX;

    var maxHeight = histogram.Buckets.Max(b => b.Count) * 1.1;

    var viewBox = $"{minX} -{maxHeight} {width} {maxHeight}";
    <svg width="200" height="200" viewBox="@viewBox" class="border bg-blue-200 border-blue-500 w-full" preserveAspectRatio="none">
        @foreach (var bucket in histogram.Buckets)
        {
            var x = bucket.Centre - histogram.BucketWidth / 2;
            var y = -bucket.Count;
            <rect x="@x" y="@y" width="@histogram.BucketWidth" height="@bucket.Count" class="fill-blue-600" />
        }
    </svg>
}

@code {
    private readonly IRng rng = StandardRng.Create();

    private DistributionType distributionType = DistributionType.Uniform;
    private Histogram? histogram;

    public void GenerateHistogram()
    {
        var histogramDist = GetSelectedHistogramDist();

        this.histogram = histogramDist.Sample(this.rng);
    }

    private IDistribution<Histogram> GetSelectedHistogramDist() =>
        this.distributionType switch
        {
            DistributionType.Uniform =>
                Uniform.New(0d, 1d)
                    .Repeat(count: 100_000)
                    .Select(v => Histogram.New(v, min: 0, max: 1)),
            DistributionType.Normal =>
                Normal.New()
                    .Repeat(count: 100_000)
                    .Select(v => Histogram.New(v, min: -4, max: 4)),
            _ => throw new ArgumentOutOfRangeException(),
        };

    public enum DistributionType
    {
        Uniform,
        Normal
    }
}