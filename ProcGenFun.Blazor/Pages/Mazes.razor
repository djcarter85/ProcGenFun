@using Microsoft.AspNetCore.Components.Forms
@using ProcGenFun
@using ProcGenFun.Blazor.Components
@using ProcGenFun.Distributions
@using ProcGenFun.Mazes
@using RandN
@using RandN.Distributions
@using RandN.Extensions
@using Svg

@page "/mazes"

<PageTitle>Mazes</PageTitle>

<Title>Mazes</Title>

<div class="mb-4 flex flex-col md:flex-row gap-x-8 gap-y-3 items-center">
    <div class="flex flex-row gap-2">
        <div>Maze algorithm:</div>

        <select @bind="mazeAlgorithm">
            <option value="@MazeAlgorithm.BinaryTree">Binary Tree</option>
            <option value="@MazeAlgorithm.Sidewinder">Sidewinder</option>
            <option value="@MazeAlgorithm.RecursiveBacktracker">Recursive Backtracker</option>
        </select>
    </div>

    <Button Text="Generate Maze" OnClick="GenerateMaze" />
</div>


@if (images != null)
{
    <div class="mt-4">
        <Button Text="&laquo;" OnClick="GoToFirstImage" />
        <Button Text="&lt;" OnClick="GoToPreviousImage" />
        <Button Text="&gt;" OnClick="GoToNextImage" />
        <Button Text="&raquo;" OnClick="GoToLastImage" />

        <span>@(this.selectedImageIndex + 1) of @this.images.Count</span>
    </div>

    <div>@((MarkupString)this.images[this.selectedImageIndex].GetXML())</div>
}

@code {
    private readonly IRng rng = StandardRng.Create();

    private MazeAlgorithm mazeAlgorithm = MazeAlgorithm.BinaryTree;

    private int selectedImageIndex = 0;
    private IReadOnlyList<SvgDocument>? images = null;

    public void GenerateMaze()
    {
        var grid = new Grid(16, 10);

        var imagesDist = this.mazeAlgorithm switch
        {
            MazeAlgorithm.BinaryTree => from history in BinaryTree.HistoryDist(grid) select GetImages(history),
            MazeAlgorithm.Sidewinder => from history in Sidewinder.HistoryDist(grid) select GetImages(history),
            MazeAlgorithm.RecursiveBacktracker =>
                from history in RecursiveBacktracker.HistoryDist(grid) select GetImages(grid, history),
            _ => throw new ArgumentOutOfRangeException()
        };

        this.images = imagesDist.Sample(this.rng);
        GoToLastImage();
    }

    public void GoToFirstImage()
    {
        this.selectedImageIndex = 0;
    }

    public void GoToPreviousImage()
    {
        if (this.selectedImageIndex > 0)
        {
            this.selectedImageIndex--;
        }
    }

    public void GoToNextImage()
    {
        if (this.selectedImageIndex < this.images!.Count - 1)
        {
            this.selectedImageIndex++;
        }
    }

    public void GoToLastImage()
    {
        this.selectedImageIndex = this.images!.Count - 1;
    }

    private IReadOnlyList<SvgDocument> GetImages(BinaryTreeHistory history)
    {
        var images = new List<SvgDocument>();

        images.Add(MazeImage.CreateSvg(history.Initial));

        foreach (var step in history.Steps)
        {
            images.Add(MazeImage.CreateSvg(step.Maze, highlightedCells: [step.Cell]));
        }

        images.Add(MazeImage.CreateSvg(history.Final));

        return images;
    }

    private static IReadOnlyList<SvgDocument> GetImages(SidewinderHistory history)
    {
        var images = new List<SvgDocument>();

        images.Add(MazeImage.CreateSvg(history.Initial));

        foreach (var step in history.Steps)
        {
            images.Add(MazeImage.CreateSvg(step.Maze, highlightedCells: step.Run));
        }

        images.Add(MazeImage.CreateSvg(history.Current));

        return images;
    }

    private static IReadOnlyList<SvgDocument> GetImages(Grid grid, History<RBState> history)
    {
        var images = new List<SvgDocument>();

        images.Add(MazeImage.CreateSvg(Maze.WithAllWalls(grid)));

        foreach (var step in history.Previous)
        {
            images.Add(
                MazeImage.CreateSvg(
                    step.Maze,
                    highlightedCells: [step.CurrentCell],
                    secondaryHighlightedCells: step.Stack.Except([step.CurrentCell])));
        }

        images.Add(MazeImage.CreateSvg(history.Current.Maze, highlightedCells: [history.Current.CurrentCell]));
        images.Add(MazeImage.CreateSvg(history.Current.Maze));

        return images;
    }

    public enum MazeAlgorithm
    {
        BinaryTree,
        Sidewinder,
        RecursiveBacktracker
    }
}
